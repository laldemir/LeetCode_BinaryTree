/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


public class Solution {
    public int level = 0;
    public int MaxDepth(TreeNode root) {
        
        if(root == null)
            return 0;
      
        //top-down -- preorder
        //findDepth(root,1);
        //return level;
        
        /* Answer _1
        int level = 1;
        
        if(root.left != null || root.right != null)
        {
            
           int maxLevel =  Math.Max( MaxDepth(root.left) , MaxDepth(root.right) );
          return  level + maxLevel;
            
        }
        
        return level;
        */
        
    
        int depth = 1;
        
        
        
        
    }
    
    public void findDepth(TreeNode node, int depth)
    {
        if(node == null)
            return;
        
        if(node.left == null && node.right == null)
        {
            level = Math.Max(level , depth);
        }
        
        findDepth(node.left, depth + 1);
        findDepth(node.right, depth + 1);
        
    }
}
